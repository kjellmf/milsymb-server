from cStringIO import StringIO
from functools import wraps
from flask import abort
from flask import Response
import flask
from milsymbserver import app
from os.path import join
import xml.etree.ElementTree as ET

ET.register_namespace('', "http://www.w3.org/2000/svg")
NAMESPACE = "{http://www.w3.org/2000/svg}"

def ns_tag(tag_name, namespace=NAMESPACE):
    return "%s%s" % (namespace, tag_name)


def parse_sidc(sidc):
    if len(sidc) != 20:
        return
    d = {}
    d['version'] = sidc[0:2]
    d['context'] = sidc[2:3]
    d['standard_identity'] = sidc[3:4]
    d['symbolset'] = sidc[4:6]
    d['status'] = sidc[6:7]
    d['hqtfd'] = sidc[7:8]
    d['amplifier'] = sidc[8:9]
    d['amplifier_descriptor'] = sidc[9:10]
    d['entity'] = sidc[10:12]
    d['entity_type'] = sidc[12:14]
    d['entity_subtype'] = sidc[14:16]
    d['modifier_one'] = sidc[16:18]
    d['modifier_two'] = sidc[18:20]

    return d


def return_svg(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        r = f(*args, **kwargs)
        return Response(r, mimetype='image/svg+xml')

    return decorated_function


@app.route('/')
def index():
    return 'Hello World!'


@app.route('/sidc/<sic>/')
@return_svg
def sic(sic):
    if len(sic) != 20:
        app.logger.error('Invalid SIDC length')
        abort(404)
    elements = parse_sidc(sic)
    return flask.jsonify(elements)


def merge_svgs(list_of_file_names):
    main_svg = ET.parse(list_of_file_names[0])
    root = main_svg.getroot()
    root.insert(0, ET.Comment("Generated by XXX"))
    for g in root.findall(ns_tag('g')):
            if "id" in g.attrib:
                g.attrib.pop("id")
            if g.get('display', '') == "none":
                root.remove(g)
    for file_name in list_of_file_names[1:]:
        svg = ET.parse(file_name)
        for g in svg.getroot().findall(ns_tag('g')):
            if "id" in g.attrib:
                g.attrib.pop("id")
            if g.get('display', '') != "none":
                root.append(g)
    return main_svg




@app.route('/testsymbol')
@return_svg
def testsymbol():
    svg1 = join(app.config["SVG_PATH"], "Frames/0_001_0.svg")
    svg2 = join(app.config["SVG_PATH"], "Appendices/Air/01110000.svg")
    svg3 = join(app.config["SVG_PATH"], "Appendices/Air\mod2/01042.svg")
    merged_svg = merge_svgs([svg1, svg2, svg3])

    f = StringIO()
    merged_svg.write(f, xml_declaration=True, encoding='utf-8')
    return f.getvalue()